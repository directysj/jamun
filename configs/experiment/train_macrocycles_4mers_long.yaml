# @package _global_

compute_average_squared_distance_from_data: true

model:
  arch:
    num_atom_types: 20
    max_sequence_length: 20
    num_atom_codes: 10
    num_residue_types: 50
  sigma_distribution:
    _target_: jamun.distributions.ConstantSigma
    sigma: 0.04 #try doing a sigma of .01-0.07 do something like .06
  max_radius: 1.0
  optim:
    lr: 0.002


callbacks:
  viz:
    sigma_list: ["${model.sigma_distribution.sigma}"]

data:
  datamodule:
    persistent_workers: false
    num_workers: 0
    _target_: jamun.data.MDtrajDataModule
    batch_size: 8
    datasets:
      train:
        _target_: jamun.data.parse_datasets_from_directory_new
        root: "/data/bucket/kleinhej/cremp-preprocessed/"
        traj_pattern: "^(.*).npz"
        topology_pattern: "^(.*).sdf"
        filter_codes_csv: "/data/davidsd5/jamun_run/train_4mers.csv"
        filter_codes_csv_header: "sequence"
        as_sdf: true

      val:
        _target_: jamun.data.parse_datasets_from_directory_new
        root: "/data/bucket/kleinhej/cremp-preprocessed/"
        traj_pattern: "^(.*).npz"
        topology_pattern: "^(.*).sdf"
        max_datasets: 100
        filter_codes_csv: "/data/davidsd5/jamun_run/val_4mers.csv"
        filter_codes_csv_header: "sequence"
        as_sdf: true

      test:
        _target_: jamun.data.parse_datasets_from_directory_new
        root: "/data/bucket/kleinhej/cremp-preprocessed/"
        traj_pattern: "^(.*).npz"
        topology_pattern: "^(.*).sdf"
        filter_codes_csv: "/data/davidsd5/jamun_run/test_4mers.csv"
        filter_codes_csv_header: "sequence"
        as_sdf: true

trainer:
  val_check_interval: 10000
  limit_val_batches: 1000
  max_epochs: 100

resume_from_checkpoint: 
  #wandb_train_run_path: "prescient-design/jamun/fs5m0glu"
  # wandb_train_run_path: "prescient-design/jamun/jxo6ng5h"
  wandb_train_run_path: "prescient-design/jamun/jlu66rrh"
  checkpoint_type: best_so_far

logger:
  wandb:
    group: train_macrocycles